// BendisHairSimulator.jsx
import React, { useState, useRef } from "react";
import jsPDF from "jspdf";

export default function BendisHairSimulator() {
  const [image, setImage] = useState(null);
  const [density, setDensity] = useState(50);
  const [zone, setZone] = useState(null);
  const [grafts, setGrafts] = useState(null);
  const reportRef = useRef(null);

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = () => setImage(reader.result);
      reader.readAsDataURL(file);
    }
  };

  const handleDrawZone = () => {
    setZone("frontal");
    alert("Zona frontal selectată pentru simulare (funcționalitate în dezvoltare)");
    calculateEstimate();
  };

  const calculateEstimate = () => {
    const surfaceCm2 = 40;
    const graftsPerCm2 = density / 2;
    const totalGrafts = Math.round(surfaceCm2 * graftsPerCm2);
    setGrafts(totalGrafts);
  };

  const exportPDF = () => {
    const doc = new jsPDF();
    doc.setFontSize(16);
    doc.text("Raport Simulare Transplant de Păr", 20, 20);

    doc.setFontSize(12);
    doc.text(`Zona selectată: ${zone}`, 20, 40);
    doc.text(`Densitate dorită: ${density}%`, 20, 50);
    doc.text(`Număr estimativ de grefe: ${grafts} grefe`, 20, 60);
    doc.text(`Durată estimată: ${Math.ceil(grafts / 800)} ore`, 20, 70);
    doc.text(`Cost estimativ: ~${(grafts * 2.5).toFixed(2)} EUR`, 20, 80);

    doc.save("raport_transplant_par.pdf");
  };

  return (
    <div style={{ maxWidth: 600, margin: "auto", padding: 20, fontFamily: "sans-serif" }}>
      <h1 style={{ fontSize: 24, fontWeight: "bold", marginBottom: 16 }}>Bendis Hair Simulator</h1>

      <input type="file" accept="image/*" onChange={handleImageUpload} style={{ marginBottom: 16 }} />

      {image && (
        <div style={{ marginBottom: 24 }}>
          <img src={image} alt="Scalp" style={{ width: "100%", maxHeight: 400, objectFit: "contain", border: "1px solid #ccc", borderRadius: 8 }} />
        </div>
      )}

      {image && (
        <>
          <div style={{ marginBottom: 24 }}>
            <label style={{ display: "block", marginBottom: 8 }}>Densitate dorită: {density}%</label>
            <input
              type="range"
              min={10}
              max={100}
              step={5}
              value={density}
              onChange={(e) => setDensity(parseInt(e.target.value))}
              style={{ width: "100%" }}
            />
          </div>

          <button onClick={handleDrawZone} style={{ padding: "10px 20px", backgroundColor: "#4f46e5", color: "white", border: "none", borderRadius: 8 }}>Desenează zona de implant</button>

          {grafts !== null && (
            <div style={{ marginTop: 24, padding: 16, border: "1px solid #ccc", borderRadius: 8, backgroundColor: "#f9f9f9" }} ref={reportRef}>
              <h2 style={{ fontSize: 18, marginBottom: 12 }}>Estimare intervenție:</h2>
              <p><strong>Zona selectată:</strong> {zone}</p>
              <p><strong>Număr estimativ de grefe:</strong> {grafts} grefe</p>
              <p><strong>Durată estimată:</strong> {Math.ceil(grafts / 800)} ore</p>
              <p><strong>Cost estimativ:</strong> ~{(grafts * 2.5).toFixed(2)} EUR (la 2.5€/grefă)</p>
              <button onClick={exportPDF} style={{ marginTop: 16, padding: "8px 16px", backgroundColor: "#059669", color: "white", border: "none", borderRadius: 8 }}>Exportă Raport PDF</button>
            </div>
          )}
        </>
      )}
    </div>
  );
}
